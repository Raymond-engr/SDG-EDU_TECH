openapi: 3.0.0
info:
  title: Talenvo Healthcare App API
  description: |
    Location-based healthcare search application that finds healthcare providers based on user location and preferences.
    Authentication is handled via JWT access tokens and HTTP-only cookie refresh tokens.
  version: 1.0.0
  contact:
    name: Talenvo Healthcare Support
    email: raymondomoyakhi@gmail.com

servers:
  - url: 'https://talenvo-healthcare-app-production-7d8e.up.railway.app/api/v1'
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
        isEmailVerified:
          type: boolean
        lastLogin:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        accessToken:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        code:
          type: string

    HealthcareProvider:
      type: object
      properties:
        uniqueId:
          type: string
        name:
          type: string
        photo:
          type: string
        alternateNames:
          type: array
          items:
            type: string
        institutionType:
          type: string
          enum: [hospital, clinic, medical_center, diagnostic_center, emergency_care, specialized_care]
        ownershipType:
          type: string
          enum: [public, private, non_profit, government, charitable]
        location:
          type: object
          properties:
            address:
              type: object
              properties:
                streetAddress:
                  type: string
                city:
                  type: string
                state:
                  type: string
                country:
                  type: string
                postalCode:
                  type: string
            coordinates:
              type: object
              properties:
                type:
                  type: string
                  enum: [Point]
                coordinates:
                  type: array
                  items:
                    type: number
            landmark:
              type: string
            neighborhood:
              type: string
        contactInfo:
          type: object
          properties:
            phoneNumbers:
              type: array
              items:
                type: string
            email:
              type: string
              format: email
            website:
              type: string
        operatingHours:
          type: array
          items:
            type: object
            properties:
              day:
                type: string
                enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
              openTime:
                type: string
              closeTime:
                type: string
              isOpen24Hours:
                type: boolean
        serviceCapabilities:
          type: object
          properties:
            specialties:
              type: array
              items:
                type: string
            appointmentBooking:
              type: object
              properties:
                available:
                  type: boolean
                methods:
                  type: array
                  items:
                    type: string
                    enum: [online, phone, walk-in, email]
                advanceNoticeRequired:
                  type: number
            emergencyServices:
              type: boolean
            languages:
              type: array
              items:
                type: string
                content:
                 application/json:
                  schema:
                    $ref: '#/components/schemas/HealthcareProvider'

paths:
  /auth/register:
    post:
      summary: Register a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                  maxLength: 50
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid input or email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          headers:
            Set-Cookie:
              schema:
                type: string
                description: HTTP-only cookie containing refresh token
        '401':
          description: Invalid credentials or email not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  code:
                    type: string
                  message:
                    type: string
                  canResend:
                    type: boolean

  /auth/refresh-token:
    post:
      summary: Refresh access token using refresh token cookie
      responses:
        '200':
          description: New access token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  accessToken:
                    type: string
          headers:
            Set-Cookie:
              schema:
                type: string
                description: New HTTP-only refresh token cookie
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: Logout user and invalidate tokens
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
          headers:
            Set-Cookie:
              schema:
                type: string
                description: Clears refresh token cookie

  /auth/verify-email/{token}:
    get:
      summary: Verify user email
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email successfully verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /auth/resend-verification:
    post:
      summary: Resend email verification token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid request or rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      summary: Initiate password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /auth/reset-password/{token}:
    post:
      summary: Reset password using reset token
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password successfully reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string               
 
  /user/me:
    get:
      summary: Get current user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /search:
   post:
     summary: Search healthcare providers
     security:
       - BearerAuth: []
     requestBody:
       required: true
       content:
         application/json:
           schema:
             type: object
             oneOf:
               - properties:
                   NameSearch:
                     type: object
                     properties:
                       name:
                         type: string
                     required: [name]
               - properties:
                   LocationSearch:
                     type: object
                     properties:
                       latitude:
                         type: number
                       longitude:
                         type: number
                     required: [latitude, longitude]
               - properties:
                   AddressSearch:
                     type: object
                     properties:
                       address:
                        type: string
                     required: [address]
           examples:
             NameSearchExample:
               summary: Search by Name
               value:
                 NameSearch:
                   name: "University of Benin Teaching Hospital"
             LocationSearchExample:
               summary: Search by Location
               value:
                 LocationSearch:
                   latitude: 37.7749
                   longitude: -122.4194
             AddressSearchExample:
               summary: Search by Address
               value:
                 AddressSearch:
                   address: "1600 Amphitheatre Parkway, Mountain View, CA"
     responses:
       '200':
         description: Search results
         content:
           application/json:
             schema:
               type: object
               properties:
                 success:
                   type: boolean
                 data:
                   type: object
                   properties:
                     providers:
                       type: array
                       items:
                         $ref: '#/components/schemas/HealthcareProvider'
                     totalResults:
                       type: number
       '400':
         description: Invalid request
         content:
           application/json:
             schema:
               type: object
               properties:
                 status:
                   type: string
                 message:
                   type: string
               example:
                 status: "fail"
                 message: "You must provide either LocationSearch, AddressSearch, or NameSearch."

  /search/filter:
    get:
      summary: Filter healthcare providers
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
          description: Search keyword for provider name or specialty
        - in: query
          name: maxDistance
          schema:
            type: number
          description: Maximum distance in kilometers
        - in: query
          name: userLocation
          schema:
            type: array
            items:
              type: number
          description: User location coordinates [latitude, longitude]
      responses:
        '200':
          description: Filtered healthcare providers
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      providers:
                        type: array
                        items:
                          $ref: '#/components/schemas/HealthcareProvider'
                      totalResults:
                        type: number